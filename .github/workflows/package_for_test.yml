name: Package Neuron for Test

on: 
  issue_comment:
    types: [created, edited]
  push:

jobs:
  check_command:
    runs-on: ubuntu-latest
    ## skip if trigger by issue comment but not pr comment
    if: ${{ (github.event_name == 'issue_comment' && github.event.issue.pull_request) || github.event_name == 'push' }}
    permissions:
      pull-requests: write
    steps:
      - name: Check for package command
        uses: xt0rted/slash-command-action@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          command: package
          reaction: "true"
          reaction-type: "eyes"
          allow-edits: "true"
          permission-level: write

  packaging:
    needs: [check_command]

    strategy:
      matrix:
        node:
          - 18.12.0
        os:
          - macos-latest
          - ubuntu-20.04
          - windows-2019

    runs-on: ${{ matrix.os }}

    name: ${{ matrix.os }}(Node.js ${{ matrix.node }})

    env:
      MAC_SHOULD_CODE_SIGN: ${{ github.event_name != 'pull_request' && secrets.APPLE_ID != '' }}
      WIN_CERTIFICATE_BASE64: ${{ secrets.WIN_CERTIFICATE_BASE64 }}

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout for push
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'push' }}

      - name: Get PR Branch
        if: github.event_name == 'issue_comment'
        id: comment-branch
        uses: yanguoyu/pull-request-comment-branch@v2.1.0-beta
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout for PR
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'issue_comment' }}
        with:
          repository: ${{ steps.comment-branch.outputs.head_owner }}/${{ steps.comment-branch.outputs.head_repo }}
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: "yarn"

      - name: Restore
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */*/node_modules
          key: 2022-12-21-${{ runner.os }}-${{ hashFiles('**/yarn.lock')}}

      - name: Add msbuild to PATH
        if: matrix.os == 'windows-2019'
        uses: microsoft/setup-msbuild@v1.3.1
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"

      - name: Install libudev
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev

      - name: Install Lerna
        run: yarn global add lerna

      - name: Bootstrap
        run: |
          yarn
        env:
          CI: false

      - name: Package for MacOS
        if: ${{ matrix.os == 'macos-latest' && env.MAC_SHOULD_CODE_SIGN == 'true' }}
        run: |
          ./scripts/download-ckb.sh mac
          yarn package:test mac
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          CSC_LINK: ${{ secrets.MAC_CERTIFICATE_BASE64 }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}

      - name: Package for MacOS for skip code sign
        if: ${{ matrix.os == 'macos-latest' && env.MAC_SHOULD_CODE_SIGN == 'false' }}
        run: |
          export CSC_IDENTITY_AUTO_DISCOVERY=false
          ./scripts/download-ckb.sh mac
          yarn package:test mac
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SKIP_NOTARIZE: true

      - name: Package for Windows
        if: ${{ matrix.os == 'windows-2019' && env.WIN_CERTIFICATE_BASE64 != '' }}
        run: |
          bash ./scripts/download-ckb.sh win
          yarn build
          bash ./scripts/copy-ui-files.sh
          bash ./scripts/package-for-test.sh win
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.WIN_CERTIFICATE_BASE64 }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CERTIFICATE_PASSWORD }}

      - name: Package for Windows for skip code sign
        if: ${{ matrix.os == 'windows-2019' && env.WIN_CERTIFICATE_BASE64 == '' }}
        run: |
          bash ./scripts/download-ckb.sh win
          yarn build
          bash ./scripts/copy-ui-files.sh
          bash ./scripts/package-for-test.sh win
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package for Linux
        if: matrix.os == 'ubuntu-20.04'
        run: |
          ./scripts/download-ckb.sh
          yarn package:test linux
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Neuron App Zip
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: Neuron-Mac-x64
          path: release/Neuron-*-mac-x64.zip

      - name: Upload Neuron App Zip(arm64)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: Neuron-Mac-arm64
          path: release/Neuron-*-mac-arm64.zip

      - name: Upload Neuron Dmg
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: Neuron-Dmg-x64
          path: release/Neuron-*-x64.dmg

      - name: Upload Neuron Dmg(arm64)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: Neuron-Dmg-arm64
          path: release/Neuron-*-arm64.dmg

      - name: Upload Neuron Win
        if: matrix.os == 'windows-2019'
        uses: actions/upload-artifact@v3
        with:
          name: Neuron-Win
          path: release/Neuron-*-setup.exe

      - name: Upload Neuron Linux
        if: matrix.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v3
        with:
          name: Neuron-Linux
          path: release/Neuron-*.AppImage

  comment_when_package_success:
    needs: [packaging]
    name: Append links to the Pull Request
    runs-on: ubuntu-latest
    steps:
      - name: Comment by push event
        if: ${{ github.event_name == 'push' }}
        uses: peter-evans/commit-comment@v2
        with:
          body: |
            Packaging for test is done in [${{ github.run_id }}](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})

      - name: Comment by pull request comment event
        if: ${{ github.event_name == 'issue_comment' }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ github.event.comment.id }}
          body: |
            Packaging for test is done in [${{ github.run_id }}](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}). @${{ github.event.comment.user.login }}
          edit-mode: append

  comment_when_package_failed:
    needs: [packaging]
    if: ${{ always() && needs.packaging.result == 'failure' }}
    name: Append failed comment to the comment
    runs-on: ubuntu-latest
    steps:
      - name: Comment by pull request comment event when package failed
        if: ${{ github.event_name == 'issue_comment' }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ github.event.comment.id }}
          body: Packageing failed in [${{ github.run_id }}](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}). @${{ github.event.comment.user.login }}
          edit-mode: append
