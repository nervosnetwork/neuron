trigger:
  batch: true
  branches:
    include:
      - master
      - develop
      - rc/*
  tags:
    include:
      - refs/tags/v*

pr:
  autoCancel: true
  branches:
    include:
      - '*'

stages:
- stage: unit_tests
  displayName: Unit Tests
  jobs:
  - job: mac
    displayName: macOS
    pool:
      vmImage: 'macos-10.14'
    strategy:
      matrix:
        node_12_x:
          node_version: 12.x
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(node_version)
      displayName: 'Install Node.js'
    - script: |
        yarn global add lerna
        yarn bootstrap
        CI=false yarn build
      name: Bootstrap
    - script: CI=true yarn test
      name: Test

  - job: linux
    displayName: Linux
    pool:
      vmImage: 'ubuntu-18.04'
    strategy:
      matrix:
        node_12_x:
          node_version: 12.x
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(node_version)
      displayName: 'Install Node.js'
    - script: |
        yarn global add lerna
        yarn bootstrap
        CI=false yarn build
      name: Bootstrap
    - script: |
        export DISPLAY=':99.0'
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        CI=true yarn test
      name: Test

  - job: win
    displayName: Windows
    pool:
      vmImage: 'windows-2019'
    strategy:
      matrix:
        node_12_x:
          node_version: 12.x
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(node_version)
      displayName: 'Install Node.js'
    - pwsh: | 
        npm config set msbuild_path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\15.0\Bin\MSBuild.exe"
        npm config set msvs_version 2017
        npm install -g node-gyp@latest
        npm prefix -g | % {npm config set node_gyp "$_\node_modules\node-gyp\bin\node-gyp.js"}
        npm install -g lerna
        npm run bootstrap
        $env:CI=false
        npm run build
        $env:CI=true
        npm run test
      displayName: 'Test'

- stage: release
  displayName: Release Binaries
  condition: eq(variables['build.sourceBranch'], 'refs/heads/master')
  jobs:
  - job: release_mac
    displayName: Release macOS
    pool:
      vmImage: 'macos-10.14'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: 12.x
      displayName: 'Install Node.js'
    - script: |
        yarn global add lerna
        yarn bootstrap
      name: Bootstrap
    - task: DownloadSecureFile@1
      name: macSiginingCertificate
      displayName: 'Download macOS Signing Certificate'
      inputs:
        secureFile: Neuron_mac.p12
    - script: |
        ./scripts/download-ckb.sh mac
        yarn release mac
      name: Release
      displayName: 'Sign and Release'
      env:
        CSC_LINK: $(macSiginingCertificate.secureFilePath)
        CSC_KEY_PASSWORD: $(macSiginingCertificatePassword)
        APPLE_ID: $(appleId)
        APPLE_ID_PASSWORD: $(appleIdPassword)
        GH_TOKEN: $(ghToken)

  - job: release_linux
    displayName: Release Linux
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: 12.x
      displayName: 'Install Node.js'
    - script: |
        yarn global add lerna
        yarn bootstrap
      name: Bootstrap
    - script: |
        ./scripts/download-ckb.sh
        yarn release linux
      name: Release
      displayName: 'Sign and Release'
      env:
        GH_TOKEN: $(ghToken)

  - job: release_win
    displayName: Release Windows
    pool:
      vmImage: 'macos-10.14'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: 12.x
      displayName: 'Install Node.js'
    - script: |
        yarn global add lerna
        yarn bootstrap
      name: Bootstrap
    - task: DownloadSecureFile@1
      name: winSiginingCertificate
      displayName: 'Download Windows Signing Certificate'
      inputs:
        secureFile: Neuron_win.p12
    - script: |
        ./scripts/download-ckb.sh win
        yarn release win
      name: Release
      displayName: 'Sign and Release'
      env:
        WIN_CSC_LINK: $(winSiginingCertificate.secureFilePath)
        WIN_CSC_KEY_PASSWORD: $(winSiginingCertificatePassword)
        GH_TOKEN: $(ghToken)